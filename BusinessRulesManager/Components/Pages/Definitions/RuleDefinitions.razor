@page "/rule-definitions"

@attribute [StreamRendering]

@using BusinessRulesManager.RulesEngine
@using BusinessRulesManager.Services;

@inject IBasicCrudService<BusinessRuleDefinition, int> crudService;
@inject IDialogService DialogService
@inject NavigationManager navManager

<PageTitle>Rule Definitions</PageTitle>

@if (ruleDefinitions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                <h3>Business Rule Definitions</h3>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Class="d-flex align-right justify-center mud-width-full py-8">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="handleAddNewClick">Add New</MudButton>
            </MudPaper>
        </MudItem>

    </MudGrid>

    <MudTable T="BusinessRuleDefinition" Items="@ruleDefinitions" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTable"
              RowClass="cursor-pointer" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent">

        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Object Type</MudTh>
            <MudTh>Conditions</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
                <MudTd DataLabel="Sign">@context.Name</MudTd>
                <MudTd DataLabel="Name">@context.Description</MudTd>
                <MudTd DataLabel="Name">@context.ObjectType</MudTd>
                <MudTd DataLabel="Name">
                    <MudButton Color="Color.Primary" OnClick="@(() => handleOpenConditionsClick(context.Id))">Open</MudButton>
                </MudTd>
        </RowTemplate>

    </MudTable>
}

@code {
    private IList<BusinessRuleDefinition> ruleDefinitions;
    private MudTable<BusinessRuleDefinition> mudTable;
    private int selectedRowNumber = -1;

    protected override async Task OnInitializedAsync()
    {
        ruleDefinitions = await crudService.ListAsync();
        await base.OnInitializedAsync();
    }

    private void handleOpenConditionsClick(int id)
    {
        navManager.NavigateTo($"/rule-definitions/{id}/conditions");
    }

    private async Task addNewlyCreatedDefinition(BusinessRuleDefinition definition)
    {
        await crudService.CreateAsync(definition);
        ruleDefinitions.Add(definition);
        StateHasChanged();
    }

    private void SaveDefinition(BusinessRuleDefinition definition)
    {
        crudService.UpdateAsync(definition);
    }

    private void RowClickEvent(TableRowClickEventArgs<BusinessRuleDefinition> tableRowClickEventArgs)
    {
    }

    private string SelectedRowClassFunc(BusinessRuleDefinition element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private void handleAddNewClick()
    {
        DialogParameters<AddRuleDefinitionDialog> parameters = new();
        
        parameters.Add(x => x.AddNewlyCreatedDefinition, 
            EventCallback.Factory.Create<BusinessRuleDefinition>(this, addNewlyCreatedDefinition));

        var options = new DialogOptions { CloseOnEscapeKey = true };

        DialogService.Show<AddRuleDefinitionDialog>("Add new business rule definition", parameters, options);
    }
}
